library(lubridate)
library(psych)
library(corrplot)
library(outliers)
# Note - Tidyverse is a collection of packages, see the Attaching packages section below. Usually best to load last so its functions will mask over other packages.
library(tidyverse)
setwd(dirname(getActiveDocumentContext()$path))
SD <- read.csv("SD.csv")
SD <- SD[,-1]
SD <- SD %>% select(Date, SDGE, starts_with("Hourly"))
head(SD)
SD_energy <- list.files(path = paste0(getwd(), "/EnergyData"),
pattern = "*.xlsx",
full.names = T) %>%
lapply(read_excel) %>%
bind_rows()
# They changed the hour variable name between HE and HR, so we'll combine them. CAISO Total was also replaced with CAISO but will be deleted later. Since all NAs are due to name changes it won't be a problem to fill with zero and then sum them to get consistent variable names.
colSums(is.na(SD_energy))
SD_energy <- SD_energy %>% select(!...8)
SD_energy[is.na(SD_energy)] <- 0
SD_energy$HR <- SD_energy$HE + SD_energy$HR
# Get rid of the duplicate variables and non-San Diego company data.
SD_energy <- SD_energy %>% select(-c("HE", "CAISO", "PGE", "SCE", "VEA", "CAISO Total"))
View(SD_energy)
SD_weather <- read.csv("Weather.csv")
View(SD_weather)
str(SD)
describe(SD)
#visualizing missing values
missing.values <- SD %>%
gather(key = "key", value = "val") %>%
mutate(is.missing = is.na(val)) %>%
group_by(key, is.missing) %>%
summarise(num.missing = n()) %>%
filter(is.missing==T) %>%
select(-is.missing) %>%
arrange(desc(num.missing))
missing.values %>%
ggplot() +
geom_bar(aes(x=key, y=num.missing), stat = 'identity') +
labs(x='variable', y="number of missing values", title='Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(missing.values)
missing.values %>%
arrange(num.missing)
missing.values %>%
arrange(num.missing) %>%
ggplot() +
geom_bar(aes(x=key, y=num.missing), stat = 'identity') +
labs(x='variable', y="number of missing values", title='Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
missing.values %>%
arrange(num.missing) %>%
ggplot() +
geom_bar(aes(x=key, y=num.missing), stat = 'identity') +
labs(x='variable', y="number of missing values", title='Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
missing.values %>%
ggplot() +
geom_bar(aes(x=reorder(key, -num.missing), y=num.missing), stat = 'identity') +
labs(x='variable', y="number of missing values", title='Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#visualizing missing values
missing.values <- SD %>%
gather(key = "key", value = "val") %>%
mutate(is.missing = is.na(val)) %>%
group_by(key, is.missing) %>%
summarise(num.missing = n()) %>%
filter(is.missing==T) %>%
select(-is.missing) %>%
arrange(desc(num.missing))
missing.values %>%
ggplot() +
geom_bar(aes(x=reorder(key, -num.missing), y=num.missing), stat = 'identity') +
labs(x='Variable', y="Number of missing values", title='Figure X.x: Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
SD$HourlyDryBulbTemperature <- as.numeric(as.character(SD$HourlyDryBulbTemperature))
SD$HourlyDewPointTemperature <- as.numeric(as.character(SD$HourlyDewPointTemperature))
SD$HourlyPrecipitation <- as.numeric(as.character(SD$HourlyPrecipitation))
num <- SD %>% dplyr::select(where(is.numeric))
describe(num)
summary(num)
drop <- c("HourlyWindGustSpeed","HourlyPressureTendency", "HourlyPressureChange", "HourlySeaLevelPressure", "HourlyPrecipitation", "HourlyPrecipitation", "HourlyDewPointTemperature")
num = num[,!(names(num) %in% drop)]
summary(num)
SD$HourlyDryBulbTemperature <- as.numeric(as.character(SD$HourlyDryBulbTemperature))
SD$HourlyDewPointTemperature <- as.numeric(as.character(SD$HourlyDewPointTemperature))
SD$HourlyPrecipitation <- as.numeric(as.character(SD$HourlyPrecipitation))
num <- SD %>% dplyr::select(where(is.numeric))
describe(num)
summary(num)
drop <- c("HourlyWindGustSpeed","HourlyPressureTendency", "HourlyPressureChange", "HourlySeaLevelPressure", "HourlyPrecipitation", "HourlyPrecipitation", "HourlyDewPointTemperature")
num = num[,!(names(num) %in% drop)]
summary(num)
num_fill <- num %>% mutate(across(where(is.numeric), ~replace_na(., median(., na.rm=TRUE))))
summary(num_fill)
tests = lapply(num_fill, grubbs.test)
tests
M = cor(num_fill)
corrplot(M, addCoef.col = 'black')
drop2 <- c("HourlyWetBulbTemperature","HourlyAltimeterSetting")
num_fill2 = num_fill[,!(names(num_fill) %in% drop2)]
M2 = cor(num_fill2)
corrplot(M2, addCoef.col = 'black')
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (°F)", y = "Hourly Energy Use (MWh)")
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (°F)", y = "Hourly Energy Use (MWh)")
View(SD)
library(ggpmisc)
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
stat_poly_line() + stat_poly_eq()
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (°F)", y = "Hourly Energy Use (MWh)")
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
stat_poly_line() + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (°F)", y = "Hourly Energy Use (MWh)")
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
stat_poly_line(level = 0.95) + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (°F)", y = "Hourly Energy Use (MWh)")
View(SD)
View(num_fill2)
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
geom_smooth() + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (°F)", y = "Hourly Energy Use (MWh)")
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
geom_smooth(method = "lm") + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (°F)", y = "Hourly Energy Use (MWh)")
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
stat_poly_line() + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (°F)", y = "Hourly Energy Use (MWh)")
View(num)
View(num)
num_cols <- c(2:7)
ScatPlotter.SD <- function(numvar){
ggplot(num, aes(x = num[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.4) +
stat_poly_line() + stat_poly_eq() +
xlab(colnames(num[numvar]))
}
num_cols <- c(2:7)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots)
library(gridExtra)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num, aes(x = num[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq() +
xlab(colnames(num[numvar]))
}
num_cols <- c(2:7)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
str(SD)
missing.values %>%
ggplot() +
geom_bar(aes(x=reorder(key, -num.missing), y=num.missing), stat = 'identity') +
labs(x='Variable', y="Number of missing values", title='Figure X.x: Number of missing values') +
coord_flip()
missing.values %>%
ggplot() +
geom_bar(aes(x=reorder(key, num.missing), y=num.missing), stat = 'identity') +
labs(x='Variable', y="Number of missing values", title='Figure X.x: Number of missing values') +
coord_flip()
rowSums(is.na(SD))
NA_row <- rowSums(is.na(SD))
is.na(SD$SDGE)
sum(is.na(SD$SDGE))
NA_row <- data.frame(NA_row, obs)
obs <- seq(1:nrow(SD))
NA_row <- data.frame(NA_row, obs)
View(NA_row)
NA_row <- data.frame(obs, NA_row)
NA_row <- NULL
NA_row <- data.frame(obs, NA_row)
NA_row <- rowSums(is.na(SD))
obs <- seq(1:nrow(SD))
NA_row <- data.frame(obs, NA_row)
View(NA_row)
max(NA_row$NA_row)
NA_row %>% filter(NA_row > 9) %>% tally()
NA_row %>% filter(NA_row > 9)
NA_row %>% filter(NA_row == 16) %>% tally()
str(SD)
SD$HourlyDryBulbTemperature <- as.numeric(as.character(SD$HourlyDryBulbTemperature))
SD$HourlyDewPointTemperature <- as.numeric(as.character(SD$HourlyDewPointTemperature))
SD$HourlyPrecipitation <- as.numeric(as.character(SD$HourlyPrecipitation))
SD$HourlyVisibility <- as.numeric(SD$HourlyVisibility)
SD$HourlyWindDirection <- as.numeric(SD$HourlyWindDirection)
num <- SD %>% dplyr::select(where(is.numeric))
describe(num)
summary(num)
drop <- c("HourlyWindGustSpeed","HourlyPressureTendency", "HourlyPressureChange", "HourlySeaLevelPressure")
num = num[,!(names(num) %in% drop)]
summary(num)
num_fill <- num %>% mutate(across(where(is.numeric), ~replace_na(., median(., na.rm=TRUE))))
summary(num_fill)
tests = lapply(num_fill, grubbs.test)
tests
M = cor(num_fill)
corrplot(M, addCoef.col = 'black')
drop2 <- c("HourlyWetBulbTemperature","HourlyAltimeterSetting", "HourlyDewPointTemperature")
num_fill2 = num_fill[,!(names(num_fill) %in% drop2)]
M2 = cor(num_fill2)
corrplot(M2, addCoef.col = 'black')
ScatPlotter.SD <- function(numvar){
ggplot(num_fill2, aes(x = num_fill2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq() +
xlab(colnames(num_fill2[numvar]))
}
num_cols <- c(2:7)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num_fill2, aes(x = num_fill2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq() +
xlab(colnames(num_fill2[numvar]))
}
num_cols <- c(2:8)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
grid.arrange(grobs = Scatterplots)
ScatPlotter.SD <- function(numvar){
ggplot(num_fill2, aes(x = num_fill2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num_fill2[numvar]))
}
num_cols <- c(2:8)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
View(num)
SD %>% select(where(is.numeric))
SD %>% select(where(is.numeric)) %>%
ggplot(aes(x = Date)) +
geom_line(aes(y=SDGE))
num_withna <- SD %>% select(where(is.numeric))
num_withna$Date <- SD$Date
ggplot(num_withna, aes(x = Date)) +
geom_line(y = SDGE)
View(num_withna)
ggplot(num_withna, aes(x = Date)) +
geom_line(aes(y = SDGE))
ggplot(num_withna, aes(x = Date)) +
geom_line(aes(y = HourlyDewPointTemperature))
ggplot(num_withna, aes(x = Date)) +
geom_point(aes(y = HourlyDewPointTemperature))
ggplot(num_withna, aes(x = Date)) +
geom_point(aes(y = SDGE))
str(num_withna)
# Only run this if you loaded in SD data from EDA
SD$Date <- as.Date(SD$Date)
setwd(dirname(getActiveDocumentContext()$path))
SD <- read.csv("SD.csv")
SD <- SD[,-1]
SD <- SD %>% select(Date, SDGE, starts_with("Hourly"))
head(SD)
SD$HourlyDryBulbTemperature <- as.numeric(as.character(SD$HourlyDryBulbTemperature))
SD$HourlyDewPointTemperature <- as.numeric(as.character(SD$HourlyDewPointTemperature))
SD$HourlyPrecipitation <- as.numeric(as.character(SD$HourlyPrecipitation))
SD$HourlyVisibility <- as.numeric(SD$HourlyVisibility)
SD$HourlyWindDirection <- as.numeric(SD$HourlyWindDirection)
# Only run this if you loaded in SD data from EDA
SD$Date <- as_datetime(SD$Date)
num_withna <- SD %>% select(where(is.numeric))
num_withna$Date <- SD$Date
ggplot(num_withna, aes(x = Date)) +
geom_line(aes(y = SDGE))
TS_plotter <- function(x){
ggplot(num_withna, aes(x = Date)) +
geom_line(aes(y = num_withna[,xvar]))+
ylab(colnames(num_withna[xvar]))
}
TS_cols <- c(1:15)
TS <- lapply(TS_cols, TS_plotter)
TS_plotter <- function(x){
ggplot(num_withna, aes(x = Date)) +
geom_line(aes(y = num_withna[,x]))+
ylab(colnames(num_withna[x]))
}
TS_cols <- c(1:15)
TS <- lapply(TS_cols, TS_plotter)
grid.arrange(grobs = TS, top = "Figure X.x")
Num_cols <- c(1:15)
TS <- lapply(Num_cols, TS_plotter)
Hists <- lapply(Num_cols, Hist_plotter)
Hist_plotter <- function(x){
ggplot(num_withna, aes(x = num_withna[,x])) +
geom_histogram() +
ylab(colnames(num_withna[x]))
}
Hists <- lapply(Num_cols, Hist_plotter)
grid.arrange(grobs = Hists, top = "Figure X.x")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(rstudioapi)
library(parsedate)
library(lubridate)
library(psych)
library(corrplot)
library(outliers)
library(ggpmisc)
library(gridExtra)
library(zoo)
# Note - Tidyverse is a collection of packages, see the Attaching packages section below. Usually best to load last so its functions will mask over other packages.
library(tidyverse)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
SD_energy <- list.files(path = paste0(getwd(), "/EnergyData"),
pattern = "*.xlsx",
full.names = T) %>%
lapply(read_excel) %>%
bind_rows()
# They changed the hour variable name between HE and HR, so we'll combine them. CAISO Total was also replaced with CAISO but will be deleted later. Since all NAs are due to name changes it won't be a problem to fill with zero and then sum them to get consistent variable names.
colSums(is.na(SD_energy))
SD_energy <- SD_energy %>% select(!...8)
SD_energy[is.na(SD_energy)] <- 0
SD_energy$HR <- SD_energy$HE + SD_energy$HR
# Get rid of the duplicate variables and non-San Diego company data.
SD_energy <- SD_energy %>% select(-c("HE", "CAISO", "PGE", "SCE", "VEA", "CAISO Total"))
SD_weather <- read.csv("Weather.csv")
SD_energy <- SD_energy %>% mutate(HR = HR-1)
SD_energy$Date <- ymd_h(paste0(SD_energy$Date, SD_energy$HR))
# Shouldn't need hour variable anymore
SD_energy <- SD_energy %>% select(!HR)
# Source 4 takes a measurement every six hours. Source 7 is hourly, so we'll keep Source 7 data.
SD_weather <- SD_weather %>% filter(SOURCE == 7)
SD_weather$DATE <- as_datetime(parse_iso_8601(SD_weather$DATE))
SD_weather$DATE <- round_date(SD_weather$DATE, unit = "hour")
SD <- SD_energy %>% left_join(SD_weather, by = c('Date' = 'DATE'))
setwd(dirname(getActiveDocumentContext()$path))
SD <- read.csv("SD.csv")
SD <- SD[,-1]
SD <- SD %>% select(Date, SDGE, starts_with("Hourly"))
head(SD)
str(SD)
describe(SD)
missing.values <- SD %>%
gather(key = "key", value = "val") %>%
mutate(is.missing = is.na(val)) %>%
group_by(key, is.missing) %>%
summarise(num.missing = n()) %>%
filter(is.missing==T) %>%
select(-is.missing) %>%
arrange(desc(num.missing))
missing.values %>%
ggplot() +
geom_bar(aes(x=reorder(key, num.missing), y=num.missing), stat = 'identity') +
labs(x='Variable', y="Number of missing values", title='Figure X.x: Number of missing values') +
coord_flip()
NA_row <- rowSums(is.na(SD))
obs <- seq(1:nrow(SD))
NA_row <- data.frame(obs, NA_row)
NA_row %>% filter(NA_row == 16) %>% tally()
# Numeric
SD$HourlyDryBulbTemperature <- as.numeric(as.character(SD$HourlyDryBulbTemperature))
SD$HourlyDewPointTemperature <- as.numeric(as.character(SD$HourlyDewPointTemperature))
SD$HourlyPrecipitation <- as.numeric(as.character(SD$HourlyPrecipitation))
SD$HourlyVisibility <- as.numeric(SD$HourlyVisibility)
SD$HourlyWindDirection <- as.numeric(SD$HourlyWindDirection)
# Factors
SD$HourlyPresentWeatherType <- as.factor(SD$HourlyPresentWeatherType)
SD$HourlySkyConditions <- as.factor(SD$HourlySkyConditions)
# Only run this if you loaded in SD data from EDA
SD$Date <- as_datetime(SD$Date)
test <- na.locf(SD)
View(test)
View(SD)
# NAs in wind gusts should be zero
test <- SD %>% mutate(HourlyWindGustSpeed = ifelse(is.na(HourlyWindGustSpeed), 0, HourlyWindGustSpeed))
# NAs in wind gusts should be zero
SD <- SD %>% mutate(HourlyWindGustSpeed = ifelse(is.na(HourlyWindGustSpeed), 0, HourlyWindGustSpeed))
# Fill the rest of NAs with the last non-NA value
SD <- na.locf(SD)
num <- SD %>% dplyr::select(where(is.numeric))
describe(num)
summary(num)
tests = lapply(num, grubbs.test)
tests
View(num)
M = cor(num)
corrplot(M, addCoef.col = 'black')
drop2 <- c("HourlyWetBulbTemperature","HourlyAltimeterSetting", "HourlyDewPointTemperature", "HourlyStationPressure")
num2 = num[,!(names(num) %in% drop2)]
M2 = cor(num2)
corrplot(M2, addCoef.col = 'black')
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
stat_poly_line() + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (°F)", y = "Hourly Energy Use (MWh)")
ggplot(data = num2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
stat_poly_line() + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (°F)", y = "Hourly Energy Use (MWh)")
View(num2)
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = num2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
num_withna <- SD %>% select(where(is.numeric))
num_wdate <- num2
num_wdate$Date <- SD$Date
View(num_wdate)
drop2 <- c("HourlyWetBulbTemperature","HourlyAltimeterSetting", "HourlyDewPointTemperature", "HourlySeaLevelPressure")
num2 = num[,!(names(num) %in% drop2)]
M2 = cor(num2)
corrplot(M2, addCoef.col = 'black')
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = num2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
drop2 <- c("HourlyDryBulbTemperature","HourlyAltimeterSetting", "HourlyDewPointTemperature", "HourlySeaLevelPressure")
num2 = num[,!(names(num) %in% drop2)]
M2 = cor(num2)
corrplot(M2, addCoef.col = 'black')
ggplot(data = num2, aes(x= HourlyWetBulbTemperature, y=SDGE)) +
geom_point() +
stat_poly_line() + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Wet Bulb Temp (°F)", y = "Hourly Energy Use (MWh)")
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = num2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
num_wdate <- num2
num_wdate$Date <- SD$Date
TS_plotter <- function(x){
ggplot(num_wdate, aes(x = Date)) +
geom_line(aes(y = num_wdate[,x]))+
ylab(colnames(num_wdate[x]))
}
PHP_cols <- c(3,4,5,6)
TWV_cols <- c(2,8,9,10,11)
TS_target <- TS_plotter(1) + ggtitle("Figure X.x: Time Series for SDGE")
TS_PHP <- lapply(PHP_cols, TS_plotter)
TS_TWV <- lapply(TWV_cols, TS_plotter)
plot(TS_target)
grid.arrange(grobs = TS_PHP, top = "Figure X.x: Time Series for Pressure, Humidity, and Precipitation Variables")
grid.arrange(grobs = TS_TWV, top = "Figure X.x: Time Series for Temperature, Wind, and Visibility Variables")
Hist_plotter <- function(x){
ggplot(num_wdate, aes(x = num_wdate[,x])) +
geom_histogram() +
xlab(colnames(num_wdate[x]))
}
Hist_target <- Hist_plotter(1) + ggtitle("Figure X.x: Distribution for SDGE")
Hist_PHP <- lapply(PHP_cols, Hist_plotter)
Hist_TWV <- lapply(TWV_cols, Hist_plotter)
plot(Hist_target)
grid.arrange(grobs = Hist_PHP, top = "Figure X.x: Distribution for Pressure, Humidity, and Precipitation Variables")
grid.arrange(grobs = Hist_TWV, top = "Figure X.x: Distribution for Temperature, Wind, and Visibility Variables")
SD %>% group_by(HourlyPresentWeatherType) %>% tally() %>% arrange(desc(n))
SD %>% group_by(HourlySkyConditions) %>% tally() %>% arrange(desc(n))
WT_aov <- aov(SDGE ~ HourlyPresentWeatherType, data = SD)
summary(WT_aov)
TukeyHSD(WT_aov)
WT_tukey <- TukeyHSD(WT_aov)
View(WT_tukey)
ggplot(SD, aes(x = Date, y = SDGE)) + geom_point()
SD %>% filter(Date == "2019-01-01") %>% ggplot(aes(x = hour(Date), y = SDGE)) + geom_line()
SD %>% filter(Date == "2019-01-01")
SD %>% filter(Date == ymd("2019-01-01"))
SD %>% filter(Date == "2019-01-01")
??filter_time
?fitler_time()
?filter_time
install.packages("tibbletime")
library(tibbletime)
install.packages("Rcpp")
install.packages("Rcpp")
version
library(tibbletime)
library(Rcpp)
install.packages("Rcpp")
