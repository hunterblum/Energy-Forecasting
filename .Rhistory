#plot
autoplot(ets_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(rstudioapi)
library(parsedate)
library(lubridate)
library(psych)
library(corrplot)
library(outliers)
library(ggpmisc)
library(gridExtra)
library(zoo)
library(forecast)
# Note - Tidyverse is a collection of packages, see the Attaching packages section below. Usually best to load last so its functions will mask over other packages.
library(tidyverse)
library(parallel)
library(doParallel)
cluster <- makeCluster(detectCores() - 1)
registerDoParallel(cluster)
setwd(dirname(getActiveDocumentContext()$path))
SD <- read.csv("SD.csv")
SD <- SD[,-1]
SD <- SD %>% select(Date, SDGE, starts_with("Hourly"))
head(SD)
str(SD)
describe(SD)
missing.values <- SD %>%
gather(key = "key", value = "val") %>%
mutate(is.missing = is.na(val)) %>%
group_by(key, is.missing) %>%
summarise(num.missing = n()) %>%
filter(is.missing==T) %>%
select(-is.missing) %>%
arrange(desc(num.missing))
missing.values %>%
ggplot() +
geom_bar(aes(x=reorder(key, num.missing), y=num.missing), stat = 'identity') +
labs(x='Variable', y="Number of missing values", title='Figure X.x: Number of missing values') +
coord_flip()
NA_row <- rowSums(is.na(SD))
obs <- seq(1:nrow(SD))
NA_row <- data.frame(obs, NA_row)
NA_row %>% filter(NA_row == 16) %>% tally()
# Numeric
SD$HourlyDryBulbTemperature <- as.numeric(as.character(SD$HourlyDryBulbTemperature))
SD$HourlyDewPointTemperature <- as.numeric(as.character(SD$HourlyDewPointTemperature))
SD$HourlyPrecipitation <- as.numeric(as.character(SD$HourlyPrecipitation))
SD$HourlyVisibility <- as.numeric(SD$HourlyVisibility)
SD$HourlyWindDirection <- as.numeric(SD$HourlyWindDirection)
# Factors
SD$HourlyPresentWeatherType <- as.factor(SD$HourlyPresentWeatherType)
SD$HourlySkyConditions <- as.factor(SD$HourlySkyConditions)
# Only run this if you loaded in SD data from EDA
SD$Date <- as_datetime(SD$Date)
# NAs in wind gusts should be zero
SD <- SD %>% mutate(HourlyWindGustSpeed = ifelse(is.na(HourlyWindGustSpeed), 0, HourlyWindGustSpeed))
# Fill the rest of NAs with the last non-NA value
SD <- na.locf(SD)
num <- SD %>% dplyr::select(where(is.numeric))
describe(num)
summary(num)
# SD got knocked out of order somewhere, rearrange to make sure lagging works
SD <- SD %>% arrange(Date)
# Create Naive Forecasts
SD$Naive <- lag(SD$SDGE)
# Calculate Error
SD$Naive_err <- SD$SDGE - SD$Naive
# Split for evaluation
SD_tr <- SD %>% filter(Date < '2022-08-31 19:00:00') %>% na.omit()
SD_val <- SD %>% filter(Date > '2022-08-31 18:00:00')
# Calculate Metrics
Naive_rmse_tr <- sqrt(mean(SD_tr$Naive_err^2))
Naive_rmse_val <- sqrt(mean(SD_val$Naive_err^2))
paste0("We had a RMSE of ", round(Naive_rmse_val,2), " with naive forecasts on the validation data.")
ggplot(SD_val, aes(x = Date)) +
geom_line(aes(y = Naive), color = 'green', linewidth = 1) +
geom_line(aes(y = SDGE), color = 'blue', alpha = 0.4, linewidth = 1) +
ggtitle("Figure X.x: Naive Forecasts on Validation Data")
ggplot(SD_val, aes(x = Date, y = Naive_err)) +
geom_line() +
ggtitle("Figure X.x: Residuals for Naive Forecasts on Validation Data")
SD_madf <- SD
RMSE_tr <- c()
RMSE_val <- c()
SD.ma <- function(k){
# Calculate forecasts
DailyMA <- rollmean(SD_madf$SDGE, k = k)
# Add NAs to forecast vector so we can bind it to our df
DailyMA <- c(rep(NA, k-1), DailyMA)
SD_madf$DailyMA <- DailyMA
# Calculate Error
SD_madf$DailyMA_err <- SD_madf$SDGE - SD_madf$DailyMA
# Split for eval
SD_tr <- SD_madf %>% filter(Date < '2022-08-31 19:00:00') %>% na.omit()
SD_val <- SD_madf %>% filter(Date > '2022-08-31 18:00:00')
# Calculate Metrics
RMSE_tr <- sqrt(mean(SD_tr$DailyMA_err^2))
RMSE_val <- sqrt(mean(SD_val$DailyMA_err^2))
# List and return
RMSE_list <- list(k, RMSE_tr, RMSE_val)
}
k = c(1:24, seq(48, 168, 24))
# Create results data frame
SD_ma_res <- lapply(k, SD.ma)
SD_ma_res <- as.data.frame(do.call(rbind, SD_ma_res))
colnames(SD_ma_res) <- c("k", "RMSE_tr", "RMSE_val")
SD_ma_res <- SD_ma_res %>% filter(RMSE_tr > 0)
best_window <- SD_ma_res[which.min(SD_ma_res$RMSE_tr), ]
best_window$k
MA_rmse_tr <- best_window$RMSE_tr[[1]]
MA_rmse_val <- best_window$RMSE_val[[1]]
# SD got knocked out of order somewhere, rearrange to make sure lagging works
SD <- SD %>% arrange(Date)
# Create Naive Forecasts
SD$Naive <- lag(SD$SDGE)
# Calculate Error
SD$Naive_err <- SD$SDGE - SD$Naive
# Split for evaluation
SD_tr <- SD %>% filter(Date < '2022-08-31 19:00:00') %>% na.omit()
SD_val <- SD %>% filter(Date > '2022-08-31 18:00:00')
# Calculate Metrics
Naive_rmse_tr <- sqrt(mean(SD_tr$Naive_err^2))
Naive_rmse_val <- sqrt(mean(SD_val$Naive_err^2))
paste0("We had a RMSE of ", round(Naive_rmse_val,2), " with naive forecasts on the validation data.")
ggplot(SD_val, aes(x = Date)) +
geom_line(aes(y = Naive), color = 'green', linewidth = 1) +
geom_line(aes(y = SDGE), color = 'blue', alpha = 0.4, linewidth = 1) +
ggtitle("Figure X.x: Naive Forecasts on Validation Data")
ggplot(SD_val, aes(x = Date, y = Naive_err)) +
geom_line() +
ggtitle("Figure X.x: Residuals for Naive Forecasts on Validation Data")
SD_madf <- SD
RMSE_tr <- c()
RMSE_val <- c()
SD.ma <- function(k){
# Calculate forecasts
DailyMA <- rollmean(SD_madf$SDGE, k = k)
# Add NAs to forecast vector so we can bind it to our df
DailyMA <- c(rep(NA, k-1), DailyMA)
SD_madf$DailyMA <- DailyMA
# Calculate Error
SD_madf$DailyMA_err <- SD_madf$SDGE - SD_madf$DailyMA
# Split for eval
SD_tr <- SD_madf %>% filter(Date < '2022-08-31 19:00:00') %>% na.omit()
SD_val <- SD_madf %>% filter(Date > '2022-08-31 18:00:00')
# Calculate Metrics
RMSE_tr <- sqrt(mean(SD_tr$DailyMA_err^2))
RMSE_val <- sqrt(mean(SD_val$DailyMA_err^2))
# List and return
RMSE_list <- list(k, RMSE_tr, RMSE_val)
}
k = c(1:24, seq(48, 168, 24))
# Create results data frame
SD_ma_res <- lapply(k, SD.ma)
SD_ma_res <- as.data.frame(do.call(rbind, SD_ma_res))
colnames(SD_ma_res) <- c("k", "RMSE_tr", "RMSE_val")
SD_ma_res <- SD_ma_res %>% filter(RMSE_tr > 0)
best_window <- SD_ma_res[which.min(SD_ma_res$RMSE_tr), ]
best_window$k
MA_rmse_tr <- best_window$RMSE_tr[[1]]
MA_rmse_val <- best_window$RMSE_val[[1]]
DailyMA_2 <- rollmean(SD_madf$SDGE, k = 2)
DailyMA_2 <- c(rep(NA, 1), DailyMA_2)
SD_madf$DailyMA_2 <- DailyMA_2
ggplot(SD_madf, aes(x = Date)) +
geom_line(aes(y = SDGE), color = "blue", linewidth = 1, alpha = 0.4) +
geom_line(aes(y = DailyMA_2), color = "darkgreen", linewidth = 1, alpha = 0.5)
X_tr <- SD_tr %>% select(HourlyWetBulbTemperature, HourlyStationPressure) %>% as.matrix()
X_val <- SD_val %>% select(HourlyWetBulbTemperature, HourlyStationPressure) %>% as.matrix()
y_tr <- SD_tr$SDGE
y_test <- SD_val$SDGE
auto_arima_model <- auto.arima(y_tr, xreg = X_tr, seasonal = TRUE, stepwise = FALSE)
summary(auto_arima_model)
auto_arima_rmse_tr <- sqrt(mean(auto_arima_model$residuals^2))
checkresiduals(auto_arima_model)
val_forecast <- forecast(auto_arima_model, xreg = X_val)
# Calculate errors
val_forecast_err <- SD_val$SDGE - val_forecast$mean
auto_arima_rmse_val <- sqrt(mean(val_forecast_err^2))
autoplot(val_forecast, series = "Forecast") +
coord_cartesian(xlim = c(38000, 39488))
X_tr_ts <- ts(X_tr, frequency = 24)
X_val_ts <- ts(X_val, frequency = 24)
y_val_ts <- ts(y_test, frequency = 24)
y_tr_ts <- ts(y_tr, frequency = 24)
X_tr_ts <- ts(X_tr, frequency = 24)
X_val_ts <- ts(X_val, frequency = 24)
y_val_ts <- ts(y_test, frequency = 24)
y_tr_ts <- ts(y_tr, frequency = 24)
SD_ets <- ets(y_tr_ts, model = "ZZZ")
summary(SD_ets)
ets_forecast <- forecast(SD_ets, h=length(y_test))
#RMSE
val_forecast_err <- SD_val$SDGE - ets_forecast$mean
ets_rmse_val <- sqrt(mean(val_forecast_err^2))
ets_rmse_tr <- sqrt(mean(SD_ets$residuals^2))
#plot
autoplot(ets_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
SD_ets <- ets(y_tr_ts, model = "ZZZ", alpha = 0.2)
summary(SD_ets)
ets_forecast <- forecast(SD_ets, h=length(y_test))
#RMSE
val_forecast_err <- SD_val$SDGE - ets_forecast$mean
ets_rmse_val <- sqrt(mean(val_forecast_err^2))
ets_rmse_tr <- sqrt(mean(SD_ets$residuals^2))
#plot
autoplot(ets_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
SD_ets <- ets(y_tr_ts, model = "ZZZ", alpha = 0.1)
summary(SD_ets)
ets_forecast <- forecast(SD_ets, h=length(y_test))
#RMSE
val_forecast_err <- SD_val$SDGE - ets_forecast$mean
ets_rmse_val <- sqrt(mean(val_forecast_err^2))
ets_rmse_tr <- sqrt(mean(SD_ets$residuals^2))
#plot
autoplot(ets_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
SD_ets <- ets(y_tr_ts, model = "ZZZ", alpha = 0.9)
summary(SD_ets)
ets_forecast <- forecast(SD_ets, h=length(y_test))
#RMSE
val_forecast_err <- SD_val$SDGE - ets_forecast$mean
ets_rmse_val <- sqrt(mean(val_forecast_err^2))
ets_rmse_tr <- sqrt(mean(SD_ets$residuals^2))
#plot
autoplot(ets_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
SD_ets <- ets(y_tr_ts, model = "ZZA")
summary(SD_ets)
ets_forecast <- forecast(SD_ets, h=length(y_test))
#RMSE
val_forecast_err <- SD_val$SDGE - ets_forecast$mean
ets_rmse_val <- sqrt(mean(val_forecast_err^2))
ets_rmse_tr <- sqrt(mean(SD_ets$residuals^2))
#plot
autoplot(ets_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
SD_reg_addseason <- tslm(y_tr_ts ~ season)
SD_reg_addseason_pred <- forecast(SD_reg_addseason, h = length(y_val_ts))
View(SD_reg_addseason_pred)
reg_forecast <- forecast(SD_ets, h=length(y_test))
#RMSE
val_forecast_err <- SD_val$SDGE - reg_forecast$mean
reg_rmse_val <- sqrt(mean(val_forecast_err^2))
ets_rmse_tr <- sqrt(mean(SD_reg_addseason$residuals^2))
#plot
autoplot(reg_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
reg_forecast <- forecast(SD_reg_addseason, h=length(y_test))
#RMSE
val_forecast_err <- SD_val$SDGE - reg_forecast$mean
reg_rmse_val <- sqrt(mean(val_forecast_err^2))
ets_rmse_tr <- sqrt(mean(SD_reg_addseason$residuals^2))
#plot
autoplot(reg_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
SD_reg_addseason <- tslm(y_tr_ts ~ season + trend)
SD_reg_addseason_pred <- forecast(SD_reg_addseason, h = length(y_val_ts))
reg_forecast <- forecast(SD_reg_addseason, h=length(y_test))
#RMSE
val_forecast_err <- SD_val$SDGE - reg_forecast$mean
reg_rmse_val <- sqrt(mean(val_forecast_err^2))
ets_rmse_tr <- sqrt(mean(SD_reg_addseason$residuals^2))
#plot
autoplot(reg_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
SD_reg_addseason <- tslm(y_tr_ts)
SD_reg_addseason <- tslm(y_tr_ts ~ season)
SD_reg_addseason_pred <- forecast(SD_reg_addseason, h = length(y_val_ts))
reg_forecast <- forecast(SD_reg_addseason, h=length(y_test))
#RMSE
val_forecast_err <- SD_val$SDGE - reg_forecast$mean
reg_rmse_val <- sqrt(mean(val_forecast_err^2))
ets_rmse_tr <- sqrt(mean(SD_reg_addseason$residuals^2))
#plot
autoplot(reg_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
reg_forecast <- forecast(SD_reg_addseason, h=length(y_test))
#RMSE
val_forecast_err <- SD_val$SDGE - reg_forecast$mean
reg_rmse_val <- sqrt(mean(val_forecast_err^2))
ets_rmse_tr <- sqrt(mean(SD_reg_addseason$residuals^2))
#plot
autoplot(reg_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
# SD got knocked out of order somewhere, rearrange to make sure lagging works
SD <- SD %>% arrange(Date)
# Create Naive Forecasts
SD$Naive <- lag(SD$SDGE)
# Calculate Error
SD$Naive_err <- SD$SDGE - SD$Naive
# Split for evaluation
SD_tr <- SD %>% filter(Date < '2022-08-31 19:00:00') %>% na.omit()
SD_val <- SD %>% filter(Date > '2022-08-31 18:00:00')
# Calculate Metrics
Naive_rmse_tr <- sqrt(mean(SD_tr$Naive_err^2))
Naive_rmse_val <- sqrt(mean(SD_val$Naive_err^2))
paste0("We had a RMSE of ", round(Naive_rmse_val,2), " with naive forecasts on the validation data.")
ggplot(SD_val, aes(x = Date)) +
geom_line(aes(y = Naive), color = 'green', linewidth = 1) +
geom_line(aes(y = SDGE), color = 'blue', alpha = 0.4, linewidth = 1) +
ggtitle("Figure X.x: Naive Forecasts on Validation Data")
ggplot(SD_val, aes(x = Date, y = Naive_err)) +
geom_line() +
ggtitle("Figure X.x: Residuals for Naive Forecasts on Validation Data")
SD_madf <- SD
RMSE_tr <- c()
RMSE_val <- c()
SD.ma <- function(k){
# Calculate forecasts
DailyMA <- rollmean(SD_madf$SDGE, k = k)
# Add NAs to forecast vector so we can bind it to our df
DailyMA <- c(rep(NA, k-1), DailyMA)
SD_madf$DailyMA <- DailyMA
# Calculate Error
SD_madf$DailyMA_err <- SD_madf$SDGE - SD_madf$DailyMA
# Split for eval
SD_tr <- SD_madf %>% filter(Date < '2022-08-31 19:00:00') %>% na.omit()
SD_val <- SD_madf %>% filter(Date > '2022-08-31 18:00:00')
# Calculate Metrics
RMSE_tr <- sqrt(mean(SD_tr$DailyMA_err^2))
RMSE_val <- sqrt(mean(SD_val$DailyMA_err^2))
# List and return
RMSE_list <- list(k, RMSE_tr, RMSE_val)
}
k = c(1:24, seq(48, 168, 24))
# Create results data frame
SD_ma_res <- lapply(k, SD.ma)
SD_ma_res <- as.data.frame(do.call(rbind, SD_ma_res))
colnames(SD_ma_res) <- c("k", "RMSE_tr", "RMSE_val")
SD_ma_res <- SD_ma_res %>% filter(RMSE_tr > 0)
best_window <- SD_ma_res[which.min(SD_ma_res$RMSE_tr), ]
best_window$k
MA_rmse_tr <- best_window$RMSE_tr[[1]]
MA_rmse_val <- best_window$RMSE_val[[1]]
DailyMA_2 <- rollmean(SD_madf$SDGE, k = 2)
DailyMA_2 <- c(rep(NA, 1), DailyMA_2)
SD_madf$DailyMA_2 <- DailyMA_2
ggplot(SD_madf, aes(x = Date)) +
geom_line(aes(y = SDGE), color = "blue", linewidth = 1, alpha = 0.4) +
geom_line(aes(y = DailyMA_2), color = "darkgreen", linewidth = 1, alpha = 0.5)
X_tr <- SD_tr %>% select(HourlyWetBulbTemperature, HourlyStationPressure) %>% as.matrix()
X_val <- SD_val %>% select(HourlyWetBulbTemperature, HourlyStationPressure) %>% as.matrix()
y_tr <- SD_tr$SDGE
y_test <- SD_val$SDGE
auto_arima_model <- auto.arima(y_tr, xreg = X_tr, seasonal = TRUE, stepwise = FALSE)
summary(auto_arima_model)
auto_arima_rmse_tr <- sqrt(mean(auto_arima_model$residuals^2))
checkresiduals(auto_arima_model)
val_forecast <- forecast(auto_arima_model, xreg = X_val)
# Calculate errors
val_forecast_err <- SD_val$SDGE - val_forecast$mean
auto_arima_rmse_val <- sqrt(mean(val_forecast_err^2))
autoplot(val_forecast, series = "Forecast") +
coord_cartesian(xlim = c(38000, 39488))
X_tr_ts <- ts(X_tr, frequency = 24)
X_val_ts <- ts(X_val, frequency = 24)
y_val_ts <- ts(y_test, frequency = 24)
y_tr_ts <- ts(y_tr, frequency = 24)
SD_ets <- ets(y_tr_ts, model = "ZZA")
summary(SD_ets)
ets_forecast <- forecast(SD_ets, h=length(y_test))
#RMSE
val_forecast_err <- SD_val$SDGE - ets_forecast$mean
ets_rmse_val <- sqrt(mean(val_forecast_err^2))
ets_rmse_tr <- sqrt(mean(SD_ets$residuals^2))
#plot
autoplot(ets_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
SD_reg_addseason <- tslm(y_tr_ts ~ season)
SD_reg_addseason_pred <- forecast(SD_reg_addseason, h = length(y_val_ts))
reg_forecast <- forecast(SD_reg_addseason, h=length(y_test))
#RMSE
val_forecast_err <- SD_val$SDGE - reg_forecast$mean
reg_rmse_val <- sqrt(mean(val_forecast_err^2))
reg_rmse_tr <- sqrt(mean(SD_reg_addseason$residuals^2))
#plot
autoplot(reg_forecast, series = "Forecast") +
coord_cartesian(xlim = c(1550, 1650))
acf(diff(diff(X_tr)))
#take a look pacf plot with differenced
pacf(diff(diff(X_tr)))
#Arima model
manual_arima_model<- Arima(y_tr, order=c(3,2,2),xreg=X_tr)
summary(manual_arima_model)
#check the residuals
checkresiduals(manual_arima_model)
manual_forecast<-forecast(manual_arima_model, xreg = X_val)
#RMSE
val_forecast_err <- SD_val$SDGE - manual_forecast$mean
manual_arima_rmse_val <- sqrt(mean(val_forecast_err^2))
manual_arima_rmse_tr <- sqrt(mean(manual_arima_model$residuals^2))
#plot
autoplot(manual_forecast, series = "Forecast") +
coord_cartesian(xlim = c(38000, 39488))
SD_ts <- ts(SD$SDGE, frequency = 24)
Acf(SD_ts, lag.max = 72)
SD_ts %>% diff(lag = 24)  %>% Acf()
Pacf(SD_ts)
SD_ts %>% diff(lag = 24) %>% Pacf()
seasonal_arima <- Arima(y_tr, order=c(1,1,1), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima)
seasonal_arima %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(2,1,2), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_forecast <- forecast(seasonal_arima_tuned, xreg = X_val)
#RMSE
val_forecast_err <- SD_val$SDGE - seasonal_forecast$mean
seasonal_arima_rmse_val <- sqrt(mean(val_forecast_err^2))
seasonal_arima_rmse_tr <- sqrt(mean(seasonal_arima_tuned$residuals^2))
#plot
autoplot(seasonal_forecast, series = "Forecast") +
coord_cartesian(xlim = c(38000, 39488))
Model <- c("Naive", "2-Hour MA", "Auto ARIMA", "Manual ARIMA", "Seasonal ARIMA", "ETS", "Seasonal Reg.")
Tr_RMSE <- c(Naive_rmse_tr, MA_rmse_tr, auto_arima_rmse_tr, manual_arima_rmse_tr, seasonal_arima_rmse_tr, ets_rmse_tr, reg_rmse_tr)
Val_RMSE <- c(Naive_rmse_val, MA_rmse_val, auto_arima_rmse_val, manual_arima_rmse_val, seasonal_arima_rmse_val, ets_rmse_val, reg_rmse_val)
Results_df <- data.frame(Model, Tr_RMSE, Val_RMSE)
Results_df <- Results_df %>% mutate(BaselineComp_tr = ifelse(Tr_RMSE == Naive_rmse_tr, "Baseline", ifelse(Tr_RMSE < Naive_rmse_tr, "Better", "Worse")))
Results_df <- Results_df %>% mutate(BaselineComp_val = ifelse(Val_RMSE == Naive_rmse_val, "Baseline", ifelse(Val_RMSE < Naive_rmse_val, "Better", "Worse")))
ggplot(Results_df, aes(x = Model, y = Tr_RMSE, color = BaselineComp_tr)) +
geom_segment(aes(x=Model, xend = Model, y = 0, yend = Tr_RMSE), size = 1.5) +
geom_point(size = 6) + coord_flip() + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Training Data (MWh)") + ggtitle("Figure X.x: Model Results for Training Data")
ggplot(Results_df, aes(x = reorder(Model, -Val_RMSE), y = Val_RMSE, color = BaselineComp_val)) +
geom_segment(aes(x=Model, xend = Model, y = 0, yend = Val_RMSE), size = 1.5) +
geom_point(size = 6) + coord_flip() + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Validation Data (MWh)") + ggtitle("Figure X.x: Model Results for Validation Data")
str(Results_df)
Results_df <- Results_df %>% mutate_if(is.character, as.factor)
str(Results_df)
ggplot(Results_df, aes(x = reorder(Model, -Val_RMSE), y = Val_RMSE, color = BaselineComp_val)) +
geom_segment(aes(x=Model, xend = Model, y = 0, yend = Val_RMSE), size = 1.5) +
geom_point(size = 6) + coord_flip() + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Validation Data (MWh)") + ggtitle("Figure X.x: Model Results for Validation Data")
ggplot(Results_df, aes(x = reorder(Model, -Val_RMSE), y = Val_RMSE, color = BaselineComp_val)) +
geom_segment(aes(x=Model, xend = Model, y = 0, yend = Val_RMSE), size = 1.5) +
geom_point(size = 6)  + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Validation Data (MWh)") + ggtitle("Figure X.x: Model Results for Validation Data")
ggplot(Results_df, aes(x = reorder(Model, -Val_RMSE), y = Val_RMSE, color = BaselineComp_val)) +
geom_segment(aes(x=reorder(Model, -Val_RMSE), xend = reorder(Model, -Val_RMSE), y = 0, yend = Val_RMSE), size = 1.5) +
geom_point(size = 6)  + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Validation Data (MWh)") + ggtitle("Figure X.x: Model Results for Validation Data")
ggplot(Results_df, aes(x = reorder(Model, -Val_RMSE), y = Val_RMSE, color = BaselineComp_val)) +
geom_segment(aes(x=reorder(Model, -Val_RMSE), xend = reorder(Model, -Val_RMSE), y = 0, yend = Val_RMSE), size = 1.5) + coord_flip() +
geom_point(size = 6)  + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Validation Data (MWh)") + ggtitle("Figure X.x: Model Results for Validation Data")
ggplot(Results_df, aes(x = reorder(Model, -Val_RMSE), y = Val_RMSE, color = BaselineComp_val)) +
geom_segment(aes(x=reorder(Model, -Val_RMSE), xend = reorder(Model, -Val_RMSE), y = 0, yend = Val_RMSE), size = 1.5) + coord_flip() +
geom_point(size = 6)  + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Validation Data (MWh)") + ggtitle("Figure X.x: Model Results for Validation Data") + ylab("Model")
ggplot(Results_df, aes(x = reorder(Model, -Val_RMSE), y = Val_RMSE, color = BaselineComp_val)) +
geom_segment(aes(x=reorder(Model, -Val_RMSE), xend = reorder(Model, -Val_RMSE), y = 0, yend = Val_RMSE), size = 1.5) + coord_flip() +
geom_point(size = 6)  + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Validation Data (MWh)") + ggtitle("Figure X.x: Model Results for Validation Data") + xlab("Model")
ggplot(Results_df, aes(x = reorder(Model, -Tr_RMSE), y = Tr_RMSE, color = BaselineComp_tr)) +
geom_segment(aes(x=(Model, -Tr_RMSE), xend = reorder(Model, -Tr_RMSE), y = 0, yend = Tr_RMSE), size = 1.5) +
ggplot(Results_df, aes(x = reorder(Model, -Tr_RMSE), y = Tr_RMSE, color = BaselineComp_tr)) +
geom_segment(aes(x=reorder(Model, -Tr_RMSE), xend = reorder(Model, -Tr_RMSE), y = 0, yend = Tr_RMSE), size = 1.5) +
geom_point(size = 6) + coord_flip() + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Training Data (MWh)") + ggtitle("Figure X.x: Model Results for Training Data")
ggplot(Results_df, aes(x = reorder(Model, -Tr_RMSE), y = Tr_RMSE, color = BaselineComp_tr)) +
geom_segment(aes(x=reorder(Model, -Tr_RMSE), xend = reorder(Model, -Tr_RMSE), y = 0, yend = Tr_RMSE), size = 1.5) +
geom_point(size = 6) + coord_flip() + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Training Data (MWh)") + ggtitle("Figure X.x: Model Results for Training Data") + xlab("Model")
ggplot(Results_df, aes(x = reorder(Model, -Tr_RMSE), y = Tr_RMSE, color = BaselineComp_tr)) +
geom_segment(aes(x=reorder(Model, -Tr_RMSE), xend = reorder(Model, -Tr_RMSE), y = 0, yend = Tr_RMSE), size = 1.5) +
geom_point(size = 6) + coord_flip() + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Training Data (MWh)") + ggtitle("Figure X.x: Model Results for Training Data") + xlab("Model") + geom_text(aes(label = round(Tr_RMSE)))
ggplot(Results_df, aes(x = reorder(Model, -Tr_RMSE), y = Tr_RMSE, color = BaselineComp_tr)) +
geom_segment(aes(x=reorder(Model, -Tr_RMSE), xend = reorder(Model, -Tr_RMSE), y = 0, yend = Tr_RMSE), size = 1.5) +
geom_point(size = 6) + coord_flip() + labs(color = "Comparison to Baseline") +
ylab("RMSE for Training Data (MWh)") + ggtitle("Figure X.x: Model Results for Training Data") + xlab("Model") + geom_text(aes(label = round(Tr_RMSE)), color = "black", size = 2.5, fontface = "bold")
ggplot(Results_df, aes(x = reorder(Model, -Tr_RMSE), y = Tr_RMSE, color = BaselineComp_tr)) +
geom_segment(aes(x=reorder(Model, -Tr_RMSE), xend = reorder(Model, -Tr_RMSE), y = 0, yend = Tr_RMSE)) +
geom_point(size = 9) + coord_flip() + labs(color = "Comparison to Baseline") +
ylab("RMSE for Training Data (MWh)") + ggtitle("Figure X.x: Model Results for Training Data") + xlab("Model") + geom_text(aes(label = round(Tr_RMSE)), color = "black", size = 2.5, fontface = "bold")
ggplot(Results_df, aes(x = reorder(Model, -Tr_RMSE), y = Tr_RMSE, color = BaselineComp_tr)) +
geom_segment(aes(x=reorder(Model, -Tr_RMSE), xend = reorder(Model, -Tr_RMSE), y = 0, yend = Tr_RMSE)) +
scale_color_manual(values = c("blue", "green", "red")) +
geom_point(size = 9) + coord_flip() + labs(color = "Comparison to Baseline") +
ylab("RMSE for Training Data (MWh)") + ggtitle("Figure X.x: Model Results for Training Data") + xlab("Model") + geom_text(aes(label = round(Tr_RMSE)), color = "black", size = 2.5, fontface = "bold")
ggplot(Results_df, aes(x = reorder(Model, -Tr_RMSE), y = Tr_RMSE, color = BaselineComp_tr)) +
geom_segment(aes(x=reorder(Model, -Tr_RMSE), xend = reorder(Model, -Tr_RMSE), y = 0, yend = Tr_RMSE)) +
scale_color_manual(values = c("blue", "green3", "red")) +
geom_point(size = 9) + coord_flip() + labs(color = "Comparison to Baseline") +
ylab("RMSE for Training Data (MWh)") + ggtitle("Figure X.x: Model Results for Training Data") + xlab("Model") + geom_text(aes(label = round(Tr_RMSE)), color = "black", size = 2.5, fontface = "bold")
ggplot(Results_df, aes(x = reorder(Model, -Tr_RMSE), y = Tr_RMSE, color = BaselineComp_tr)) +
geom_segment(aes(x=reorder(Model, -Tr_RMSE), xend = reorder(Model, -Tr_RMSE), y = 0, yend = Tr_RMSE)) +
scale_color_manual(values = c("dodgerblue2", "green3", "firebrick2")) +
geom_point(size = 9) + coord_flip() + labs(color = "Comparison to Baseline") +
ylab("RMSE for Training Data (MWh)") + ggtitle("Figure X.x: Model Results for Training Data") + xlab("Model") + geom_text(aes(label = round(Tr_RMSE)), color = "black", size = 2.5, fontface = "bold")
ggplot(Results_df, aes(x = reorder(Model, -Val_RMSE), y = Val_RMSE, color = BaselineComp_val)) +
geom_segment(aes(x=reorder(Model, -Val_RMSE), xend = reorder(Model, -Val_RMSE), y = 0, yend = Val_RMSE)) +
scale_color_manual(values = c("dodgerblue2", "green3", "firebrick2")) +
geom_point(size = 9) + coord_flip() + labs(color = "Comparison to Baseline") +
ylab("RMSE for Validation Data (MWh)") + ggtitle("Figure X.x: Model Results for Validation Data") + xlab("Model") + geom_text(aes(label = round(Val_RMSE)), color = "black", size = 2.5, fontface = "bold")
