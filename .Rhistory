library(outliers)
library(ggpmisc)
library(gridExtra)
library(zoo)
library(forecast)
# Note - Tidyverse is a collection of packages, see the Attaching packages section below. Usually best to load last so its functions will mask over other packages.
library(tidyverse)
setwd(dirname(getActiveDocumentContext()$path))
SD <- read.csv("SD.csv")
SD <- SD[,-1]
SD <- SD %>% select(Date, SDGE, starts_with("Hourly"))
head(SD)
# Numeric
SD$HourlyDryBulbTemperature <- as.numeric(as.character(SD$HourlyDryBulbTemperature))
SD$HourlyDewPointTemperature <- as.numeric(as.character(SD$HourlyDewPointTemperature))
SD$HourlyPrecipitation <- as.numeric(as.character(SD$HourlyPrecipitation))
SD$HourlyVisibility <- as.numeric(SD$HourlyVisibility)
SD$HourlyWindDirection <- as.numeric(SD$HourlyWindDirection)
# Factors
SD$HourlyPresentWeatherType <- as.factor(SD$HourlyPresentWeatherType)
SD$HourlySkyConditions <- as.factor(SD$HourlySkyConditions)
# Only run this if you loaded in SD data from EDA
SD$Date <- as_datetime(SD$Date)
# NAs in wind gusts should be zero
SD <- SD %>% mutate(HourlyWindGustSpeed = ifelse(is.na(HourlyWindGustSpeed), 0, HourlyWindGustSpeed))
# Fill the rest of NAs with the last non-NA value
SD <- na.locf(SD)
# SD got knocked out of order somewhere, rearrange to make sure lagging works
SD <- SD %>% arrange(Date)
# Create Naive Forecasts
SD$Naive <- lag(SD$SDGE)
# Calculate Error
SD$Naive_err <- SD$SDGE - SD$Naive
# Split for evaluation
SD_tr <- SD %>% filter(Date < '2022-08-31 19:00:00') %>% na.omit()
SD_val <- SD %>% filter(Date > '2022-08-31 18:00:00')
# Calculate Metrics
Naive_rmse_tr <- sqrt(mean(SD_tr$Naive_err^2))
Naive_rmse_val <- sqrt(mean(SD_val$Naive_err^2))
paste0("We had a RMSE of ", round(Naive_rmse_val,2), " with naive forecasts on the validation data.")
ggplot(SD_val, aes(x = Date)) +
geom_line(aes(y = Naive), color = 'green', linewidth = 1) +
geom_line(aes(y = SDGE), color = 'blue', alpha = 0.4, linewidth = 1) +
ggtitle("Figure X.x: Naive Forecasts on Validation Data")
ggplot(SD_val, aes(x = Date, y = Naive_err)) +
geom_line() +
ggtitle("Figure X.x: Residuals for Naive Forecasts on Validation Data")
SD_madf <- SD
RMSE_tr <- c()
RMSE_val <- c()
SD.ma <- function(k){
# Calculate forecasts
DailyMA <- rollmean(SD_madf$SDGE, k = k)
# Add NAs to forecast vector so we can bind it to our df
DailyMA <- c(rep(NA, k-1), DailyMA)
SD_madf$DailyMA <- DailyMA
# Calculate Error
SD_madf$DailyMA_err <- SD_madf$SDGE - SD_madf$DailyMA
# Split for eval
SD_tr <- SD_madf %>% filter(Date < '2022-08-31 19:00:00') %>% na.omit()
SD_val <- SD_madf %>% filter(Date > '2022-08-31 18:00:00')
# Calculate Metrics
RMSE_tr <- sqrt(mean(SD_tr$DailyMA_err^2))
RMSE_val <- sqrt(mean(SD_val$DailyMA_err^2))
# List and return
RMSE_list <- list(k, RMSE_tr, RMSE_val)
}
k = c(1:24, seq(48, 168, 24))
# Create results data frame
SD_ma_res <- lapply(k, SD.ma)
SD_ma_res <- as.data.frame(do.call(rbind, SD_ma_res))
colnames(SD_ma_res) <- c("k", "RMSE_tr", "RMSE_val")
SD_ma_res <- SD_ma_res %>% filter(RMSE_tr > 0)
best_window <- SD_ma_res[which.min(SD_ma_res$RMSE_tr), ]
best_window$k
MA_rmse_tr <- best_window$RMSE_tr[[1]]
MA_rmse_val <- best_window$RMSE_val[[1]]
X_tr <- SD_tr %>% select(HourlyWetBulbTemperature, HourlyStationPressure) %>% as.matrix()
X_val <- SD_val %>% select(HourlyWetBulbTemperature, HourlyStationPressure) %>% as.matrix()
y_tr <- SD_tr$SDGE
y_test <- SD_val$SDGE
auto_arima_model <- auto.arima(y_tr, xreg = X_tr, seasonal = TRUE)
summary(auto_arima_model)
auto_arima_rmse_tr <- sqrt(mean(auto_arima_model$residuals^2))
?auto.arima
auto_arima_model <- auto.arima(y_tr, xreg = X_tr, seasonal = TRUE, parallel = TRUE)
auto_arima_model <- auto.arima(y_tr, xreg = X_tr, seasonal = TRUE, parallel = TRUE, stepwise = FALSE)
val_forecast <- forecast(auto_arima_model, xreg = X_val)
# Calculate errors
val_forecast_err <- SD_val$SDGE - val_forecast$mean
auto_arima_rmse_val <- sqrt(mean(val_forecast_err^2))
autoplot(val_forecast, series = "Forecast") +
coord_cartesian(xlim = c(38000, 39488))
#Arima model
manual_arima_model<- Arima(y_tr, order=c(3,2,2),xreg=X_tr)
summary(manual_arima_model)
manual_forecast<-forecast(manual_arima_model, xreg = X_val)
#RMSE
val_forecast_err <- SD_val$SDGE - manual_forecast$mean
manual_arima_rmse_val <- sqrt(mean(val_forecast_err^2))
manual_arima_rmse_tr <- sqrt(mean(manual_arima_model$residuals^2))
#plot
autoplot(manual_forecast, series = "Forecast") +
coord_cartesian(xlim = c(38000, 39488))
acf(diff(diff(X_tr)))
View(X_tr)
acf(y_tr)
acf(y_tr, lag.max = 72)
#check the residuals
checkresiduals(manual_arima_model)
y_tr %>% diff(lag =24) %>% ggtsdisplay()
y_tr %>% ggtsdisplay()
?ggtsdisplay
y_tr %>% ggtsdisplay(lag.max = 72)
y_tr %>% ggtsdisplay(lag.max = 96)
y_tr %>% diff(lag =24) %>% ggtsdisplay(lag.max = 96)
y_tr %>% diff(lag =24) %>% ggtsdisplay(lag.max = 48)
SD_ts <- ts(SD$SDGE, frequency = 24)
acf(SD_ts)
acf(SD_ts, lag.max = 24)
acf(SD_ts, lag.max = 72)
acf(diff(SD_ts))
acf(diff(diff(SD_ts)))
Pacf(diff(diff(SD_ts)))
SD_ts %>% diff(lag = 24) %>% diff() %>% Acf()
SD_ts %>% diff(lag = 24)  %>% Acf()
acf(SD_ts, lag.max = 72)
Acf(SD_ts, lag.max = 72)
SD_ts %>% diff(lag = 24) %>% Acf()
SD_ts %>% diff(lag = 24) %>% diff() %>% Acf()
Pacf(SD_ts)
SD_ts %>% diff(lag = 24) %>% diff() %>% Pacf()
seasonal_arima <- Arima(y_tr, order=c(1,1,1), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima)
seasonal_arima %>% residuals() %>% ggtsdisplay()
View(seasonal_arima)
seasonal_arima$aic
# Set up search grid
p <- c(1:5)
d <- c(1:5)
q <- c(1:5)
P <- c(1:5)
D <- c(1:5)
Q <- c(1:5)
ARIMA.tuner <- function(p,d,q,P,D,Q){
arima_temp <- Arima(y_tr, order = c(p,d,q), seasonal = c(P,D,Q), xreg = X_tr)
AIC <- arima_temp$aic
}
# Set up search grid
p <- c(1:5)
d <- c(1:5)
q <- c(1:5)
P <- c(1:5)
D <- c(1:5)
Q <- c(1:5)
ARIMA_tuning_res <- outer(p,d,q,P,D,Q, ARIMA.tuner)
ARIMA.tuner <- function(p,d,q,P,D,Q){
arima_temp <- Arima(y_tr, order = c(p,d,q), seasonal = c(P,D,Q), xreg = X_tr)
AIC <- arima_temp$aic
}
# Set up search grid
p <- c(1:5)
d <- c(1:5)
q <- c(1:5)
P <- c(1:5)
D <- c(1:5)
Q <- c(1:5)
ARIMA_tuning_res <- outer(p,d,q,P,D,Q, ARIMA.tuner)
ARIMA.tuner(1,1,1,1,1,1)
ARIMA.tuner <- function(p,d,q,P,D,Q){
arima_temp <- Arima(y_tr, order = c(p,d,q), seasonal = c(P,D,Q), xreg = X_tr)
AIC <- arima_temp$aic
return(AIC)
}
ARIMA.tuner(1,1,1,1,1,1)
ARIMA_tuning_res <- outer(p,d,q,P,D,Q, ARIMA.tuner)
?cmapply
seasonal_arima %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(2,1,2), seasonal = c(2,1,2), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(3,1,3), xreg=X_tr)
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(3,1,3), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(4,1,4), xreg=X_tr)
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(4,1,4), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(24,1,24), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(5,1,5), xreg=X_tr)
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(5,1,5), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(5,24,5), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima <- Arima(SD_ts, order=c(1,1,1), seasonal = c(1,1,1), xreg=X_tr)
seasonal_arima <- Arima(y_tr, order=c(1,1,1), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima)
seasonal_arima %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(2,1,2), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(0,1,2), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(1,1,1), xreg=X_tr)
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(0,1,1), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
checkresiduals(seasonal_arima_tuned)
seasonal_arima_tuned <- Arima(diff(y_tr, lag = 24), order=c(3,1,3), seasonal = c(1,1,1), xreg=X_tr)
auto_arima_model <- auto.arima(y_tr, xreg = X_tr, seasonal = TRUE, stepwise = FALSE)
summary(auto_arima_model)
auto_arima_rmse_tr <- sqrt(mean(auto_arima_model$residuals^2))
val_forecast <- forecast(auto_arima_model, xreg = X_val)
# Calculate errors
val_forecast_err <- SD_val$SDGE - val_forecast$mean
auto_arima_rmse_val <- sqrt(mean(val_forecast_err^2))
# Calculate errors
val_forecast_err <- SD_val$SDGE - val_forecast$mean
auto_arima_rmse_val <- sqrt(mean(val_forecast_err^2))
Plot
```{r}
autoplot(val_forecast, series = "Forecast") +
coord_cartesian(xlim = c(38000, 39488))
```
## Manual ARIMA
Twice differenced ACF plot
```{r}
acf(diff(diff(X_tr)))
```
autoplot(val_forecast, series = "Forecast") +
coord_cartesian(xlim = c(38000, 39488))
autoplot(val_forecast, series = "Forecast") +
coord_cartesian(xlim = c(38000, 39488))
seasonal_forecast <- forecast(seasonal_arima_tuned, xreg = X_val)
#RMSE
val_forecast_err <- SD_val$SDGE - seasonal_forecast$mean
seasonal_arima_rmse_val <- sqrt(mean(val_forecast_err^2))
seasonal_arima_rmse_tr <- sqrt(mean(seasonal_arima_model$residuals^2))
seasonal_arima_rmse_tr <- sqrt(mean(seasonal_arima_tuned$residuals^2))
#plot
autoplot(seasonal_forecast, series = "Forecast") +
coord_cartesian(xlim = c(38000, 39488))
Model <- c("Naive", "2-Hour MA", "Auto ARIMA", "Manual ARIMA", "Seasonal ARIMA")
Tr_RMSE <- c(Naive_rmse_tr, MA_rmse_tr, auto_arima_rmse_tr, manual_arima_rmse_tr, seasonal_arima_rmse_tr)
Val_RMSE <- c(Naive_rmse_val, MA_rmse_val, auto_arima_rmse_val, manual_arima_rmse_val, seasonal_arima_rmse_val)
Results_df <- data.frame(Model, Tr_RMSE, Val_RMSE)
Results_df <- Results_df %>% mutate(BaselineComp_tr = ifelse(Tr_RMSE == Naive_rmse_tr, "Baseline", ifelse(Tr_RMSE < Naive_rmse_tr, "Better", "Worse")))
Results_df <- Results_df %>% mutate(BaselineComp_val = ifelse(Val_RMSE == Naive_rmse_val, "Baseline", ifelse(Val_RMSE < Naive_rmse_val, "Better", "Worse")))
ggplot(Results_df, aes(x = Model, y = Tr_RMSE, color = BaselineComp_tr)) +
geom_segment(aes(x=Model, xend = Model, y = 0, yend = Tr_RMSE), size = 1.5) +
geom_point(size = 6) + coord_flip() + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Training Data (MWh)") + ggtitle("Figure X.x: Model Results for Training Data")
ggplot(Results_df, aes(x = reorder(Model, -Val_RMSE), y = Val_RMSE, color = BaselineComp_val)) +
geom_segment(aes(x=Model, xend = Model, y = 0, yend = Val_RMSE), size = 1.5) +
geom_point(size = 6) + coord_flip() + labs(color = "Comparison to Baseline") +
scale_color_manual(values = c("blue", "darkgreen", "red")) +
ylab("RMSE for Validation Data (MWh)") + ggtitle("Figure X.x: Model Results for Validation Data")
seasonal_arima <- Arima(y_tr, order=c(1,1,1), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima)
seasonal_arima %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(1,24,1), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,2,3), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(4,1,3), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(0,1,1), xreg=X_tr)
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(0,1,1), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,0,3), seasonal = c(1,1,1), xreg=X_tr)
seasonal_arima_tuned <- Arima(y_tr, order=c(3,0,3), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(1,2,1), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(1,3,1), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
SD_ts %>% diff(lag = 24) %>% Pacf()
SD_ts %>% diff(lag = 24)  %>% Acf()
seasonal_arima <- Arima(y_tr, order=c(1,0,1), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima)
seasonal_arima %>% residuals() %>% ggtsdisplay()
seasonal_arima <- Arima(y_tr, order=c(1,0,1), seasonal = c(1,24,1), xreg=X_tr)
summary(seasonal_arima)
seasonal_arima %>% residuals() %>% ggtsdisplay()
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = num2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
num <- SD %>% dplyr::select(where(is.numeric))
describe(num)
summary(num)
tests = lapply(num, grubbs.test)
tests
M = cor(num)
corrplot(M, addCoef.col = 'black')
drop2 <- c("HourlyDryBulbTemperature","HourlyAltimeterSetting", "HourlyDewPointTemperature", "HourlySeaLevelPressure")
num2 = num[,!(names(num) %in% drop2)]
M2 = cor(num2)
corrplot(M2, addCoef.col = 'black')
ggplot(data = num2, aes(x= HourlyWetBulbTemperature, y=SDGE)) +
geom_point() +
stat_poly_line() + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Wet Bulb Temp (°F)", y = "Hourly Energy Use (MWh)")
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = num2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = log10(num2[,numvar]), y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = num2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = num2[,log10(numvar)], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = num2[,numvar], y = log(SDGE))) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = num2[,numvar], y = log10(SDGE))) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = num2[,numvar], y = SDGE^2)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = num2[,numvar], y = SDGE^3)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ln()
log()
?log()
?log
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = log(num2[,numvar]), y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = (num2[,numvar])^2, y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = log(num2[,numvar]), y = log(SDGE))) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num2, aes(x = num2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num2[numvar]))
}
num_cols <- c(2:11)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
X_tr_lag24 <- X_tr %>% lag(24)
View(X_tr_lag24)
View(X_tr)
View(X_tr_lag24)
X_tr_lag24[24:nrow(X_tr_lag24)]
X_tr_lag24[24]
X_tr_lag24[25]
checkresiduals(auto_arima_model)
auto.arima(y_tr[25:length(y_tr)], xreg = X_tr_lag24[25:nrow(X_tr_lag24),], seasonal = TRUE)
Auto_arima_lag <- auto.arima(y_tr[25:length(y_tr)], xreg = X_tr_lag24[25:nrow(X_tr_lag24),], seasonal = TRUE)
summary(Auto_arima_lag)
summary(auto_arima_model)
seasonal_arima <- Arima(y_tr, order=c(1,1,1), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima)
seasonal_arima %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(1,24,1), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr, order=c(3,1,3), seasonal = c(2,1,2), xreg=X_tr)
summary(seasonal_arima_tuned)
seasonal_arima_tuned %>% residuals() %>% ggtsdisplay()
Hist_plotter <- function(x){
ggplot(num_wdate, aes(x = num_wdate[,x])) +
geom_histogram() +
xlab(colnames(num_wdate[x]))
}
Hist_target <- Hist_plotter(1) + ggtitle("Figure X.x: Distribution for SDGE")
num_wdate <- num2
num_wdate$Date <- SD$Date
TS_plotter <- function(x){
ggplot(num_wdate, aes(x = Date)) +
geom_line(aes(y = num_wdate[,x]))+
ylab(colnames(num_wdate[x]))
}
PHP_cols <- c(3,4,5,6)
TWV_cols <- c(2,8,9,10,11)
TS_target <- TS_plotter(1) + ggtitle("Figure X.x: Time Series for SDGE")
TS_PHP <- lapply(PHP_cols, TS_plotter)
TS_TWV <- lapply(TWV_cols, TS_plotter)
plot(TS_target)
grid.arrange(grobs = TS_PHP, top = "Figure X.x: Time Series for Pressure, Humidity, and Precipitation Variables")
grid.arrange(grobs = TS_TWV, top = "Figure X.x: Time Series for Temperature, Wind, and Visibility Variables")
Hist_plotter <- function(x){
ggplot(num_wdate, aes(x = num_wdate[,x])) +
geom_histogram() +
xlab(colnames(num_wdate[x]))
}
Hist_target <- Hist_plotter(1) + ggtitle("Figure X.x: Distribution for SDGE")
Hist_PHP <- lapply(PHP_cols, Hist_plotter)
Hist_TWV <- lapply(TWV_cols, Hist_plotter)
plot(Hist_target)
grid.arrange(grobs = Hist_PHP, top = "Figure X.x: Distribution for Pressure, Humidity, and Precipitation Variables")
grid.arrange(grobs = Hist_TWV, top = "Figure X.x: Distribution for Temperature, Wind, and Visibility Variables")
ts(X_tr, frequency = 24)
y_tr_ts <- ts(y_tr, frequency = 24)
X_tr_ts <-ts(X_tr, frequency = 24)
X_val_ts <- ts(X_val_ts, frequency = 24)
X_val_ts <- ts(X_val, frequency = 24)
y_val_ts <- ts(y_val, frequency = 24)
y_val_ts <- ts(y_test, frequency = 24)
seasonal_arima <- Arima(y_tr, order=c(1,1,1), seasonal = c(1,1,1), xreg=X_tr)
summary(seasonal_arima)
seasonal_arima %>% residuals() %>% ggtsdisplay()
seasonal_arima <- Arima(y_tr_ts, order=c(1,1,1), seasonal = c(1,1,1), xreg=X_tr_ts)
seasonal_arima <- Arima(y_tr_ts, order=c(1,1,1), seasonal = c(1,1,1), xreg=X_tr_ts)
summary(seasonal_arima)
seasonal_arima %>% residuals() %>% ggtsdisplay()
seasonal_arima_tuned <- Arima(y_tr_ts, order=c(3,1,3), seasonal = c(2,1,2), xreg=X_tr_ts)
seasonal_arima_tuned <- Arima(y_tr_ts, order=c(3,1,3), seasonal = c(1,1,1), xreg=X_tr_ts)
