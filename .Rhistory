SD <- SD[,-1]
SD <- SD %>% select(Date, SDGE, starts_with("Hourly"))
head(SD)
str(SD)
describe(SD)
SD$HourlyDryBulbTemperature <- as.numeric(as.character(SD$HourlyDryBulbTemperature))
SD$HourlyDewPointTemperature <- as.numeric(as.character(SD$HourlyDewPointTemperature))
SD$HourlyPrecipitation <- as.numeric(as.character(SD$HourlyPrecipitation))
num <- SD %>% dplyr::select(where(is.numeric))
describe(num)
summary(num)
drop <- c("HourlyWindGustSpeed","HourlyPressureTendency", "HourlyPressureChange", "HourlySeaLevelPressure", "HourlyPrecipitation", "HourlyPrecipitation", "HourlyDewPointTemperature")
num = num[,!(names(num) %in% drop)]
summary(num)
num_fill <- num %>% mutate(across(where(is.numeric), ~replace_na(., median(., na.rm=TRUE))))
summary(num_fill)
tests = lapply(num_fill, grubbs.test)
tests
M = cor(num_fill)
corrplot(M, addCoef.col = 'black')
drop2 <- c("HourlyWetBulbTemperature","HourlyAltimeterSetting")
num_fill2 = num_fill[,!(names(num_fill) %in% drop2)]
M2 = cor(num_fill2)
corrplot(M2, addCoef.col = 'black')
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (Â°F)", y = "Hourly Energy Use (MWh)")
#visualizing missing values
missing.values <- SD %>%
gather(key = "key", value = "val") %>%
mutate(is.missing = is.na(val)) %>%
group_by(key, is.missing) %>%
summarise(num.missing = n()) %>%
filter(is.missing==T) %>%
select(-is.missing) %>%
arrange(desc(num.missing))
missing.values %>%
ggplot() +
geom_bar(aes(x=key, y=num.missing), stat = 'identity') +
labs(x='variable', y="number of missing values", title='Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
library(rstudioapi)
library(tidyverse)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
Wine <- read.csv("AustralianWines.csv")
Gas <- read.csv("NaturalGas.csv")
str(Wine)
library(lubridate)
# Covvert Month to Date Time
test <- as_date(Wine$Month)
# Covvert Month to Date Time
test$test <- as_date(Wine$Month)
View(test)
# Convert Month to Date Time
test <- my(Wine$Month)
View(Wine)
test
# Convert Month to Date Time
Wine$Month <- my(Wine$Month)
str(Wine)
# Create training and validation sets
Wine_tr <- Wine %>% filter(Month < "1994-01-01")
Wine_val <- Wine %>% filter(Month >= "1994-01-01")
install.packages("forecast")
library(forecast)
View(Wine)
ggplot(Wine, aes(x = Month, y = Fortified)) + geom_line()
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = year(Month))) + geom_line()
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line()
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line() + scale_x_date(date_labels = "%b")
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line()
ggplot(Wine, aes(x = Month, y = Fortified, fill = as.factor(year(Month)))) + geom_line()
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line()
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line() +xlab("Month")
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line() +xlab("Month") + scale_x_continuous(breaks = 1)
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line() +xlab("Month") + scale_x_continuous(breaks = 12)
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line() +xlab("Month") + scale_x_continuous(breaks = seq(1,12))
ggplot(Wine, aes(x = Month, y = Fortified)) + geom_line()
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line() +xlab("Month") + scale_x_continuous(breaks = seq(1,12))
ggplot(Wine, aes(x = Month, y = Fortified)) + geom_line() + xlab("Date")
ggplot(Wine, aes(x = Month, y = Fortified)) + geom_line() + xlab("Date")
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line() + xlab("Month") + scale_x_continuous(breaks = seq(1,12))
ggplot(Wine, aes(x = Month, y = Fortified)) + geom_line() + xlab("Date") + ggtilte("Figure 5.1")
ggplot(Wine, aes(x = Month, y = Fortified)) + geom_line() + xlab("Date") + ggtitle("Figure 5.1")
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line() + xlab("Month") + scale_x_continuous(breaks = seq(1,12)) + ggtitle("Figure 5.2")
ggplot(Wine, aes(x = Month, y = Fortified)) + geom_line() + xlab("Date") + ggtitle("Figure 5.1") + ylab("Fortified Wine Sales")
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line() + xlab("Month") + scale_x_continuous(breaks = seq(1,12)) + ggtitle("Figure 5.2") + ylab("Fortified Wine Sales")
ggplot(Wine, aes(x = month(Month), y = Fortified, color = as.factor(year(Month)))) + geom_line() + xlab("Month") + scale_x_continuous(breaks = seq(1,12)) + ggtitle("Figure 5.2") + ylab("Fortified Wine Sales")
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line() + xlab("Month") + scale_x_continuous(breaks = seq(1,12)) + ggtitle("Figure 5.2") + ylab("Fortified Wine Sales")
ggplot(Wine, aes(x = Month, y = Fortified)) + geom_line() + xlab("Date") + ggtitle("Figure 5.1") + ylab("Fortified Wine Sales")
# Will use fill instead of color since we don't need a legend to asess monthly seasonality.
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line() + xlab("Month") + scale_x_continuous(breaks = seq(1,12)) + ggtitle("Figure 5.2") + ylab("Fortified Wine Sales")
Wine_hwin <- ets(Wine_tr, model = "ZZM")
length(Wine)
View(Wine)
data("presidents")
force(presidents)
Wine_tr_ts <- ts(Wine_tr)
View(Wine_tr_ts)
install.packages("xts")
library(xts)
knitr::opts_chunk$set(echo = TRUE)
library(rstudioapi)
library(lubridate)
library(forecast)
library(xts)
library(tidyverse)
Wine <- read.csv("AustralianWines.csv")
Gas <- read.csv("NaturalGas.csv")
str(Wine)
# Convert Month to Date Time
Wine$Month <- my(Wine$Month)
# Create training and validation sets - This method seems more clear than using the date index and window
Wine_tr <- Wine %>% filter(Month < "1994-01-01")
Fort_tr_ts <- xts(Wine_tr$Fortified, Wine_tr$Month)
Wine_val <- Wine %>% filter(Month >= "1994-01-01")
Fort_val_ts <- xts(Wine_val$Fortified, Wine_val$Month)
View(Wine_tr_ts)
View(Fort_tr_ts)
Wine_hwin <- ets(Wine_tr, model = "ZZM")
Wine_hwin <- ets(Fort_tr_ts, model = "ZZM")
str(Wine)
# Convert Month to Date Time
Wine$Month <- my(Wine$Month)
# Create training and validation sets - This method seems more clear than using the date index and window
Wine_tr <- Wine %>% filter(Month < "1994-01-01")
Fort_tr_ts <- xts(Wine_tr$Fortified, Wine_tr$Month ,frequency = 12)
Wine_val <- Wine %>% filter(Month >= "1994-01-01")
Fort_val_ts <- xts(Wine_val$Fortified, Wine_val$Month, frequency = 12)
ggplot(Wine, aes(x = Month, y = Fortified)) + geom_line() + xlab("Date") + ggtitle("Figure 5.1") + ylab("Fortified Wine Sales")
str(Wine)
# Convert Month to Date Time
Wine$Month <- my(Wine$Month)
# Create training and validation sets - This method seems more clear than using the date index and window
Wine_tr <- Wine %>% filter(Month < "1994-01-01")
Fort_tr_ts <- xts(Wine_tr$Fortified, Wine_tr$Month ,frequency = 12)
Wine_val <- Wine %>% filter(Month >= "1994-01-01")
Fort_val_ts <- xts(Wine_val$Fortified, Wine_val$Month, frequency = 12)
Fort_tr_ts <- xts(Wine_tr$Fortified, Wine_tr$Month ,frequency = 12)
View(Fort_tr_ts)
str(Wine)
# Convert Month to Date Time
Wine$Month <- my(Wine$Month)
# Create training and validation sets - This method seems more clear than using the date index and window
Wine_tr <- Wine %>% filter(Month < "1994-01-01")
Fort_tr_ts <- xts(Wine_tr$Fortified, Wine_tr$Month ,frequency = 12)
Wine_val <- Wine %>% filter(Month >= "1994-01-01")
Fort_val_ts <- xts(Wine_val$Fortified, Wine_val$Month, frequency = 12)
View(Wine)
Wine <- read.csv("AustralianWines.csv")
Gas <- read.csv("NaturalGas.csv")
str(Wine)
# Convert Month to Date Time
Wine$Month <- my(Wine$Month)
# Create training and validation sets - This method seems more clear than using the date index and window
Wine_tr <- Wine %>% filter(Month < "1994-01-01")
Fort_tr_ts <- xts(Wine_tr$Fortified, Wine_tr$Month ,frequency = 12)
Wine_val <- Wine %>% filter(Month >= "1994-01-01")
Fort_val_ts <- xts(Wine_val$Fortified, Wine_val$Month, frequency = 12)
View(Fort_val_ts)
ggplot(Wine, aes(x = Month, y = Fortified)) + geom_line() + xlab("Date") + ggtitle("Figure 5.1") + ylab("Fortified Wine Sales")
# Will use fill instead of color since we don't need a legend to asess monthly seasonality.
ggplot(Wine, aes(x = month(Month), y = Fortified, fill = as.factor(year(Month)))) + geom_line() + xlab("Month") + scale_x_continuous(breaks = seq(1,12)) + ggtitle("Figure 5.2") + ylab("Fortified Wine Sales")
Wine_hwin <- ets(Fort_tr_ts, model = "ZZM")
View(Fort_tr_ts)
Wine_hwin <- ets(Fort_tr_ts, model = "ZZM")
# Create training and validation sets - This method seems more clear than using the date index and window
Fort_ts <- ts(Wine$Fortified, start = c(1980,1), frequency = 12)
length(Fort_ts)
Wine <- read.csv("AustralianWines.csv")
Gas <- read.csv("NaturalGas.csv")
str(Wine)
# Convert Month to Date Time
Wine$Month <- my(Wine$Month)
# Create training and validation sets - This method seems more clear than using the date index and window
nval = 12
Fort_ts <- ts(Wine$Fortified, start = c(1980,1), frequency = 12)
Fort_tr <- window(Fort_ts, end = length(Fort_ts) - nval)
Fort_tr <- window(Fort_ts, end = (length(Fort_ts) - nval))
Fort_tr <- window(Fort_ts, end = c(1993,12))
Fort_val <- window(Fort_ts, start = c(1994,1))
Wine_hwin <- ets(Fort_tr, model = "ZZM")
Fort_hwin_pred <- forecast(Fort_hwin, h = 12, level = 0)
Fort_hwin <- ets(Fort_tr, model = "ZZM")
Fort_hwin_pred <- forecast(Fort_hwin, h = 12, level = 0)
Fort_hwin <- ets(Fort_tr, model = "ZZM")
Fort_hwin_pred <- forecast(Fort_hwin, h = 12, level = 0)
plot(Fort_hwin_pred, ylab = "Fortified Wine Sales", xlab = "Time", bty = "l", xaxt = "n", xlim = c(1980, 1995), flty = 2)
axis(1, at = seq(1980, 1995, 1), labels = format(seq(1991, 2006, 1)))
lines(Fort_val)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(rstudioapi)
library(parsedate)
library(lubridate)
library(psych)
library(corrplot)
library(outliers)
# Note - Tidyverse is a collection of packages, see the Attaching packages section below. Usually best to load last so its functions will mask over other packages.
library(tidyverse)
setwd(dirname(getActiveDocumentContext()$path))
SD <- read.csv("SD.csv")
SD <- SD[,-1]
SD <- SD %>% select(Date, SDGE, starts_with("Hourly"))
head(SD)
SD_energy <- list.files(path = paste0(getwd(), "/EnergyData"),
pattern = "*.xlsx",
full.names = T) %>%
lapply(read_excel) %>%
bind_rows()
# They changed the hour variable name between HE and HR, so we'll combine them. CAISO Total was also replaced with CAISO but will be deleted later. Since all NAs are due to name changes it won't be a problem to fill with zero and then sum them to get consistent variable names.
colSums(is.na(SD_energy))
SD_energy <- SD_energy %>% select(!...8)
SD_energy[is.na(SD_energy)] <- 0
SD_energy$HR <- SD_energy$HE + SD_energy$HR
# Get rid of the duplicate variables and non-San Diego company data.
SD_energy <- SD_energy %>% select(-c("HE", "CAISO", "PGE", "SCE", "VEA", "CAISO Total"))
View(SD_energy)
SD_weather <- read.csv("Weather.csv")
View(SD_weather)
str(SD)
describe(SD)
#visualizing missing values
missing.values <- SD %>%
gather(key = "key", value = "val") %>%
mutate(is.missing = is.na(val)) %>%
group_by(key, is.missing) %>%
summarise(num.missing = n()) %>%
filter(is.missing==T) %>%
select(-is.missing) %>%
arrange(desc(num.missing))
missing.values %>%
ggplot() +
geom_bar(aes(x=key, y=num.missing), stat = 'identity') +
labs(x='variable', y="number of missing values", title='Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(missing.values)
missing.values %>%
arrange(num.missing)
missing.values %>%
arrange(num.missing) %>%
ggplot() +
geom_bar(aes(x=key, y=num.missing), stat = 'identity') +
labs(x='variable', y="number of missing values", title='Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
missing.values %>%
arrange(num.missing) %>%
ggplot() +
geom_bar(aes(x=key, y=num.missing), stat = 'identity') +
labs(x='variable', y="number of missing values", title='Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
missing.values %>%
ggplot() +
geom_bar(aes(x=reorder(key, -num.missing), y=num.missing), stat = 'identity') +
labs(x='variable', y="number of missing values", title='Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#visualizing missing values
missing.values <- SD %>%
gather(key = "key", value = "val") %>%
mutate(is.missing = is.na(val)) %>%
group_by(key, is.missing) %>%
summarise(num.missing = n()) %>%
filter(is.missing==T) %>%
select(-is.missing) %>%
arrange(desc(num.missing))
missing.values %>%
ggplot() +
geom_bar(aes(x=reorder(key, -num.missing), y=num.missing), stat = 'identity') +
labs(x='Variable', y="Number of missing values", title='Figure X.x: Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
SD$HourlyDryBulbTemperature <- as.numeric(as.character(SD$HourlyDryBulbTemperature))
SD$HourlyDewPointTemperature <- as.numeric(as.character(SD$HourlyDewPointTemperature))
SD$HourlyPrecipitation <- as.numeric(as.character(SD$HourlyPrecipitation))
num <- SD %>% dplyr::select(where(is.numeric))
describe(num)
summary(num)
drop <- c("HourlyWindGustSpeed","HourlyPressureTendency", "HourlyPressureChange", "HourlySeaLevelPressure", "HourlyPrecipitation", "HourlyPrecipitation", "HourlyDewPointTemperature")
num = num[,!(names(num) %in% drop)]
summary(num)
SD$HourlyDryBulbTemperature <- as.numeric(as.character(SD$HourlyDryBulbTemperature))
SD$HourlyDewPointTemperature <- as.numeric(as.character(SD$HourlyDewPointTemperature))
SD$HourlyPrecipitation <- as.numeric(as.character(SD$HourlyPrecipitation))
num <- SD %>% dplyr::select(where(is.numeric))
describe(num)
summary(num)
drop <- c("HourlyWindGustSpeed","HourlyPressureTendency", "HourlyPressureChange", "HourlySeaLevelPressure", "HourlyPrecipitation", "HourlyPrecipitation", "HourlyDewPointTemperature")
num = num[,!(names(num) %in% drop)]
summary(num)
num_fill <- num %>% mutate(across(where(is.numeric), ~replace_na(., median(., na.rm=TRUE))))
summary(num_fill)
tests = lapply(num_fill, grubbs.test)
tests
M = cor(num_fill)
corrplot(M, addCoef.col = 'black')
drop2 <- c("HourlyWetBulbTemperature","HourlyAltimeterSetting")
num_fill2 = num_fill[,!(names(num_fill) %in% drop2)]
M2 = cor(num_fill2)
corrplot(M2, addCoef.col = 'black')
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (Â°F)", y = "Hourly Energy Use (MWh)")
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (Â°F)", y = "Hourly Energy Use (MWh)")
View(SD)
library(ggpmisc)
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
stat_poly_line() + stat_poly_eq()
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (Â°F)", y = "Hourly Energy Use (MWh)")
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
stat_poly_line() + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (Â°F)", y = "Hourly Energy Use (MWh)")
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
stat_poly_line(level = 0.95) + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (Â°F)", y = "Hourly Energy Use (MWh)")
View(SD)
View(num_fill2)
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
geom_smooth() + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (Â°F)", y = "Hourly Energy Use (MWh)")
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
geom_smooth(method = "lm") + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (Â°F)", y = "Hourly Energy Use (MWh)")
ggplot(data = num_fill2, aes(x= HourlyDryBulbTemperature, y=SDGE)) +
geom_point() +
stat_poly_line() + stat_poly_eq() +
labs(title="SDGE Usage By Temp",
x="Dry Bulb Temp (Â°F)", y = "Hourly Energy Use (MWh)")
View(num)
View(num)
num_cols <- c(2:7)
ScatPlotter.SD <- function(numvar){
ggplot(num, aes(x = num[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.4) +
stat_poly_line() + stat_poly_eq() +
xlab(colnames(num[numvar]))
}
num_cols <- c(2:7)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots)
library(gridExtra)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num, aes(x = num[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq() +
xlab(colnames(num[numvar]))
}
num_cols <- c(2:7)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
str(SD)
missing.values %>%
ggplot() +
geom_bar(aes(x=reorder(key, -num.missing), y=num.missing), stat = 'identity') +
labs(x='Variable', y="Number of missing values", title='Figure X.x: Number of missing values') +
coord_flip()
missing.values %>%
ggplot() +
geom_bar(aes(x=reorder(key, num.missing), y=num.missing), stat = 'identity') +
labs(x='Variable', y="Number of missing values", title='Figure X.x: Number of missing values') +
coord_flip()
rowSums(is.na(SD))
NA_row <- rowSums(is.na(SD))
is.na(SD$SDGE)
sum(is.na(SD$SDGE))
NA_row <- data.frame(NA_row, obs)
obs <- seq(1:nrow(SD))
NA_row <- data.frame(NA_row, obs)
View(NA_row)
NA_row <- data.frame(obs, NA_row)
NA_row <- NULL
NA_row <- data.frame(obs, NA_row)
NA_row <- rowSums(is.na(SD))
obs <- seq(1:nrow(SD))
NA_row <- data.frame(obs, NA_row)
View(NA_row)
max(NA_row$NA_row)
NA_row %>% filter(NA_row > 9) %>% tally()
NA_row %>% filter(NA_row > 9)
NA_row %>% filter(NA_row == 16) %>% tally()
str(SD)
SD$HourlyDryBulbTemperature <- as.numeric(as.character(SD$HourlyDryBulbTemperature))
SD$HourlyDewPointTemperature <- as.numeric(as.character(SD$HourlyDewPointTemperature))
SD$HourlyPrecipitation <- as.numeric(as.character(SD$HourlyPrecipitation))
SD$HourlyVisibility <- as.numeric(SD$HourlyVisibility)
SD$HourlyWindDirection <- as.numeric(SD$HourlyWindDirection)
num <- SD %>% dplyr::select(where(is.numeric))
describe(num)
summary(num)
drop <- c("HourlyWindGustSpeed","HourlyPressureTendency", "HourlyPressureChange", "HourlySeaLevelPressure")
num = num[,!(names(num) %in% drop)]
summary(num)
num_fill <- num %>% mutate(across(where(is.numeric), ~replace_na(., median(., na.rm=TRUE))))
summary(num_fill)
tests = lapply(num_fill, grubbs.test)
tests
M = cor(num_fill)
corrplot(M, addCoef.col = 'black')
drop2 <- c("HourlyWetBulbTemperature","HourlyAltimeterSetting", "HourlyDewPointTemperature")
num_fill2 = num_fill[,!(names(num_fill) %in% drop2)]
M2 = cor(num_fill2)
corrplot(M2, addCoef.col = 'black')
ScatPlotter.SD <- function(numvar){
ggplot(num_fill2, aes(x = num_fill2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq() +
xlab(colnames(num_fill2[numvar]))
}
num_cols <- c(2:7)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
ScatPlotter.SD <- function(numvar){
ggplot(num_fill2, aes(x = num_fill2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq() +
xlab(colnames(num_fill2[numvar]))
}
num_cols <- c(2:8)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
grid.arrange(grobs = Scatterplots)
ScatPlotter.SD <- function(numvar){
ggplot(num_fill2, aes(x = num_fill2[,numvar], y = SDGE)) +
geom_point(shape = 1 , alpha = 0.2) +
stat_poly_line() + stat_poly_eq(geom = "label") +
xlab(colnames(num_fill2[numvar]))
}
num_cols <- c(2:8)
Scatterplots <- lapply(num_cols, ScatPlotter.SD)
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
grid.arrange(grobs = Scatterplots, top = "Figure X.x")
View(num)
SD %>% select(where(is.numeric))
SD %>% select(where(is.numeric)) %>%
ggplot(aes(x = Date)) +
geom_line(aes(y=SDGE))
num_withna <- SD %>% select(where(is.numeric))
num_withna$Date <- SD$Date
ggplot(num_withna, aes(x = Date)) +
geom_line(y = SDGE)
View(num_withna)
ggplot(num_withna, aes(x = Date)) +
geom_line(aes(y = SDGE))
ggplot(num_withna, aes(x = Date)) +
geom_line(aes(y = HourlyDewPointTemperature))
ggplot(num_withna, aes(x = Date)) +
geom_point(aes(y = HourlyDewPointTemperature))
ggplot(num_withna, aes(x = Date)) +
geom_point(aes(y = SDGE))
str(num_withna)
# Only run this if you loaded in SD data from EDA
SD$Date <- as.Date(SD$Date)
setwd(dirname(getActiveDocumentContext()$path))
SD <- read.csv("SD.csv")
SD <- SD[,-1]
SD <- SD %>% select(Date, SDGE, starts_with("Hourly"))
head(SD)
SD$HourlyDryBulbTemperature <- as.numeric(as.character(SD$HourlyDryBulbTemperature))
SD$HourlyDewPointTemperature <- as.numeric(as.character(SD$HourlyDewPointTemperature))
SD$HourlyPrecipitation <- as.numeric(as.character(SD$HourlyPrecipitation))
SD$HourlyVisibility <- as.numeric(SD$HourlyVisibility)
SD$HourlyWindDirection <- as.numeric(SD$HourlyWindDirection)
# Only run this if you loaded in SD data from EDA
SD$Date <- as_datetime(SD$Date)
num_withna <- SD %>% select(where(is.numeric))
num_withna$Date <- SD$Date
ggplot(num_withna, aes(x = Date)) +
geom_line(aes(y = SDGE))
TS_plotter <- function(x){
ggplot(num_withna, aes(x = Date)) +
geom_line(aes(y = num_withna[,xvar]))+
ylab(colnames(num_withna[xvar]))
}
TS_cols <- c(1:15)
TS <- lapply(TS_cols, TS_plotter)
TS_plotter <- function(x){
ggplot(num_withna, aes(x = Date)) +
geom_line(aes(y = num_withna[,x]))+
ylab(colnames(num_withna[x]))
}
TS_cols <- c(1:15)
TS <- lapply(TS_cols, TS_plotter)
grid.arrange(grobs = TS, top = "Figure X.x")
Num_cols <- c(1:15)
TS <- lapply(Num_cols, TS_plotter)
Hists <- lapply(Num_cols, Hist_plotter)
Hist_plotter <- function(x){
ggplot(num_withna, aes(x = num_withna[,x])) +
geom_histogram() +
ylab(colnames(num_withna[x]))
}
Hists <- lapply(Num_cols, Hist_plotter)
grid.arrange(grobs = Hists, top = "Figure X.x")
